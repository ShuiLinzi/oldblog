(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{423:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ol",[a("li",[a("p",[t._v("栈和队列的相互转换：队列进去的顺序是1 --\x3e 2,1 --\x3e 3,2,1，队列进去的顺序是1，2，3")])]),t._v(" "),a("li",[a("p",[t._v("数组长度api没有小括号，s.length;即可")])]),t._v(" "),a("li",[a("p",[t._v("递归三要素(二叉树问题基本都是递归，然后通过递归三部曲解决问题)")]),t._v(" "),a("ul",[a("li",[a("em",[t._v("确认递归函数的参数和返回值")]),t._v("：确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数，并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型")]),t._v(" "),a("li",[a("em",[t._v("确认终止条件")]),t._v("：写完了递归算法，运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出")]),t._v(" "),a("li",[a("em",[t._v("确认单层递归的逻辑")]),t._v("：确认每一层递归需要处理的信息。在这里也就是重复调用自己来实现递归过程")])])]),t._v(" "),a("li",[a("p",[t._v("Queue<> queue = new LinkedList<>() 队列，底层用链表实现")]),t._v(" "),a("ul",[a("li",[t._v("offer() 增加节点，如果超过容量会返回false，不会抛出异常")]),t._v(" "),a("li",[t._v("add() 增加节点，只不过如果超过容量会抛出异常提醒")]),t._v(" "),a("li",[t._v("remove() 删除节点，如果不存在，会抛出异常")]),t._v(" "),a("li",[t._v("poll() 删除节点")]),t._v(" "),a("li",[t._v("element()")]),t._v(" "),a("li",[t._v("peek() 如果队列不为空，返回这个队列队头的元素，但不删除。如果队列为空，第一个方法抛出NoSuchElementException，第二个返回null")]),t._v(" "),a("li",[t._v("isEmpty() 是否为空")])])]),t._v(" "),a("li",[a("p",[t._v("Queue<> queue = new ArrayDeque<>() 队列，底层用循环数组实现")])]),t._v(" "),a("li",[a("p",[t._v("Deque<> queue = new LinkedList<>() 双端队列，底层用链表实现")]),t._v(" "),a("ul",[a("li",[t._v("addFirst()")]),t._v(" "),a("li",[t._v("addLast()")]),t._v(" "),a("li",[t._v("offerFirst()")]),t._v(" "),a("li",[t._v("offerLast() 将给定的对象添加到双端队列的队头或者队尾，如果这个双端队列已满，前面两个方法将抛出IllegalStateException，而后面两个方法返回false")]),t._v(" "),a("li",[t._v("removeFirst()")]),t._v(" "),a("li",[t._v("removeLast()")]),t._v(" "),a("li",[t._v("pollFirst()")]),t._v(" "),a("li",[t._v("pollLast()")]),t._v(" "),a("li",[t._v("getFirst()")]),t._v(" "),a("li",[t._v("getLast()")]),t._v(" "),a("li",[t._v("peekFirst()")]),t._v(" "),a("li",[t._v("peekLast()")])])]),t._v(" "),a("li",[a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ShuiLinzi/blog-image@master/%E7%AE%97%E6%B3%95/%E4%B8%8B%E6%A0%87.webp",alt:"下标"}})])]),t._v(" "),a("li",[a("ul",[a("li",[t._v("二叉树节点的深度：指从根节点到该节点的最长简单路径边的条数。")]),t._v(" "),a("li",[t._v("二叉树节点的高度：指从该节点到叶子节点的最长简单路径边的条数。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ShuiLinzi/blog-image@master/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B7%B1%E5%BA%A6%E9%AB%98%E5%BA%A6.webp",alt:"二叉树深度高度"}})])])]),t._v(" "),a("li",[a("p",[t._v("数组到集合Arrays.asList()")])]),t._v(" "),a("li",[a("p",[t._v("集合到数组coll.toArray()")])]),t._v(" "),a("li",[a("p",[t._v("如何根据两个顺序构造一个唯一的二叉树，以 后序数组的最后一个元素为切割点，先切中序数组，根据中序数组，反过来在切后序数组。一层一层切下去，每次后序数组最后一个元素就是节点元素。\n流程图：\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ShuiLinzi/blog-image@master/%E7%AE%97%E6%B3%95/%E7%94%9F%E6%88%90%E4%BA%8C%E5%8F%89%E6%A0%91.webp",alt:"生成二叉树"}})])]),t._v(" "),a("li",[a("p",[t._v("在递归遍历的时候，什么时候直接return 递归函数的返回值，什么时候不用加这个 return呢？如果要搜索一条边，递归函数就要加返回值，这里也是一样的道理。因为搜索到目标节点了，就要立即return了，这样才是找到节点就返回（搜索某一条边），如果不加return，就是遍历整棵树了。")])]),t._v(" "),a("li",[a("p",[t._v("二叉树中通过递归的时候返回TreeNode节点可以来增加 删除节点")])]),t._v(" "),a("li",[a("p",[t._v("在二叉树题目选择什么遍历顺序：")])])]),t._v(" "),a("ul",[a("li",[t._v("涉及到二叉树的构造，无论普通二叉树还是二叉搜索树一定前序，都是先构造中节点。")]),t._v(" "),a("li",[t._v("求普通二叉树的属性，一般是后序，一般要通过递归函数的返回值做计算")]),t._v(" "),a("li",[t._v("求二叉搜索树的属性，一定是中序了，要不白瞎了有序性了。")])]),t._v(" "),a("ol",{attrs:{start:"15"}},[a("li",[t._v("回溯算法模板")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtracking")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("终止条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        存放结果"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("选择：本层集合中元素（树中节点孩子的数量就是集合的大小）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        处理节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtracking")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径，选择列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归")]),t._v("\n        回溯，撤销处理结果\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("ol",{attrs:{start:"16"}},[a("li",[t._v("回溯递归中关于组合问题：对于组合问题，什么时候需要startIndex呢？")])]),t._v(" "),a("p",[t._v("我举过例子，如果是一个集合来求组合的话，就需要startIndex，例如：77.组合 (opens new window)，216.组合总和III (opens new window)。")]),t._v(" "),a("p",[t._v("如果是多个集合取组合，各个集合之间相互不影响，那么就不用startIndex，例如：17.电话号码的字母组")]),t._v(" "),a("ol",{attrs:{start:"17"}},[a("li",[a("p",[t._v("回溯算法中 backtrack(candidates,target,sum+candidates[i],i+1); 让sum当参数传出去，可以减少对sum的回溯")])]),t._v(" "),a("li",[a("p",[t._v("回溯模板非常重要，回溯算法解决都是套用回溯模板 yyds")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);